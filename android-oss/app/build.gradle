buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.apollographql.android'
apply from: 'quality.gradle'

def externalPrivateVersion = new File(project.rootDir.path + "/app/external_version_code.txt").text.trim().toInteger()
def externalPublicVersion = new File(project.rootDir.path + "/app/external_version_name.txt").text.trim()
def internalPrivateVersion = new File(project.rootDir.path + "/app/internal_version_code.txt").text.trim().toInteger()
def internalPublicVersion = new File(project.rootDir.path + "/app/internal_version_name.txt").text.trim()
def isCircle = "true" == System.getenv("CIRCLECI")

ext.signing = [
        storeFilePath: "path/to/keystore",
        storePassword: "keystore password",
        keyAlias     : "key alias",
        keyPassword  : "key password"
]

if (file('signing.gradle').exists()) {
    apply from: 'signing.gradle'
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.kickstarter"
        minSdkVersion 23
        targetSdkVersion 28
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GIT_SHA", "\"${commitSha()}\""
        buildConfigField "String", "BUILD_DATE", "\"${commitTime()}\""

        // Enable Multidex to support over 65K methods
        multiDexEnabled true

        resConfigs "de", "es", "en", "fr", "ja"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
        release {
            storeFile file(project.signing.storeFilePath)
            storePassword project.signing.storePassword
            keyAlias project.signing.keyAlias
            keyPassword project.signing.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            if (isCircle) {
                // The release build generated on CircleCI doesn't need to be signed with our real
                // keystore - we just need a release build to verify that it compiles. Using the
                // debug keystore means we don't have to expose our keystore.
                signingConfig signingConfigs.debug
            } else {
                signingConfig signingConfigs.release
            }
        }
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "AUDIENCE"

    productFlavors {
        internal {
            dimension "AUDIENCE"
            applicationId "com.kickstarter.kickstarter.internal"
            versionCode internalPrivateVersion
            versionName internalPublicVersion
        }
        external {
            dimension "AUDIENCE"
            applicationId "com.kickstarter.kickstarter"
            versionCode externalPrivateVersion
            versionName externalPublicVersion
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Fixes build error hitting GC overhead limit
    dexOptions {
        javaMaxHeapSize "3072M"
    }

    lintOptions {
        quiet true
        warningsAsErrors true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
    }

    sourceSets {
        androidTest {
            java.srcDir file('src/androidTest/java')
            java.srcDir file('src/androidTest/kotlin')
        }
        main.java.srcDirs += 'src/main/kotlin'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    configurations.all {
        resolutionStrategy.force 'com.android.support:appcompat-v7:27.1.1'
        resolutionStrategy.force 'com.android.support:animated-vector-drawable:27.1.1'
        resolutionStrategy.force 'com.android.support:customtabs:27.1.1'
    }

}

buildscript {
    repositories {
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath 'com.apollographql.apollo:apollo-gradle-plugin:0.5.0'
    }
}

apollo {
    customTypeMapping['Email'] = "java.lang.String"
    customTypeMapping['Date'] = "java.util.Date"
}

afterEvaluate {
    buildFabricPropertiesIfNeeded()
}

/**
 *
 * build fabric properties file, if missing
 */
def buildFabricPropertiesIfNeeded() {
    def propertiesFile = file("fabric.properties")
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: System.getenv('apiSecret'))
            entry(key: "apiKey", value: System.getenv('apiKey'))
        }
    }
}

repositories {
    jcenter()
    maven {
        url 'https://maven.google.com'
    }
}

// library versions
final apollo = "0.5.0"
final auto_parcel_version = "0.3.1"
final butterknife_version = "7.0.1"
final crashlytics_version = "2.9.6@aar"
final dagger_version = "2.11"
final exoplayer_version = "2.9.1"
final firebase_version = "16.0.6"
final firebase_job_dispatcher_version = "0.8.5"
final firebase_messaging_version = "17.3.4"
final joda_time_version = "2.7.2"
final jsoup_version = "1.8.2"
final leak_canary_version = "1.6.3"
final okhttp_version = "3.5.0"
final picasso_version = "2.5.2"
final phoenix_version = "1.0.2"
final play_services_version = "16.0.1"
final retrofit_version = "2.3.0"
final rx_binding_version = "0.4.0"
final rx_java_version = "1.1.5"
final rx_lifecycle_version = "0.3.0"
final stripe_version = "8.3.0"
final timber_version = "3.0.1"

// Test support versions
final junit_version = "4.12"
final mockito_version = "2.8.9"
final robolectric_version = "3.8"
final robolectric_shadows_version = "3.0"
final robolectric_shadows_support_version = "3.4-rc2"

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.annotation:annotation:1.0.1'
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'com.facebook.android:facebook-android-sdk:[5,6)'
    implementation "com.github.frankiesardo:auto-parcel:$auto_parcel_version"
    kapt "com.github.frankiesardo:auto-parcel-processor:$auto_parcel_version"
    implementation 'com.google.android.material:material:1.1.0-alpha02'
    implementation "com.google.firebase:firebase-core:$firebase_version"
    implementation "com.firebase:firebase-jobdispatcher:$firebase_job_dispatcher_version"
    implementation "com.google.firebase:firebase-messaging:$firebase_messaging_version"
    implementation "com.google.android.gms:play-services-wallet:$play_services_version"
    implementation "com.google.android.exoplayer:exoplayer:$exoplayer_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.jakewharton:butterknife:$butterknife_version"
    implementation "com.jakewharton:process-phoenix:$phoenix_version"
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.stripe:stripe-android:$stripe_version"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$leak_canary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttp_version"
    implementation "com.squareup.picasso:picasso:$picasso_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.trello:rxlifecycle:$rx_lifecycle_version"
    implementation "com.trello:rxlifecycle-components:$rx_lifecycle_version"
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation "io.reactivex:rxjava:$rx_java_version"
    implementation "com.jakewharton.rxbinding:rxbinding:$rx_binding_version"
    implementation "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:$rx_binding_version"
    implementation "com.jakewharton.rxbinding:rxbinding-support-v4:$rx_binding_version"
    implementation "net.danlew:android.joda:$joda_time_version"
    implementation "org.jsoup:jsoup:$jsoup_version"
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlytics_version") {
        transitive = true
    }
    implementation "com.apollographql.apollo:apollo-runtime:$apollo"
    implementation "com.apollographql.apollo:apollo-android-support:$apollo"

    // Testing
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "org.robolectric:shadows-multidex:$robolectric_shadows_version"
    testImplementation "org.robolectric:shadows-play-services:$robolectric_shadows_version"
    testImplementation "org.robolectric:shadows-support-v4:$robolectric_shadows_support_version"
    androidTestImplementation 'androidx.annotation:annotation:1.0.1'
    androidTestImplementation "androidx.test.ext:junit:1.1.0"
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.1'
}

// SHA and timestamp caching courtesy of https://github.com/gdg-x/frisbee/blob/develop/app/build.gradle#L193-L218
def commitSha() {
    def file = new File(project.buildDir, "commit-sha.txt")
    if (file.exists()) {
        return file.text
    }

    def value = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

    file.parentFile.mkdirs()
    file.text = value
    return value
}

def commitTime() {
    def file = new File(project.buildDir, "commit-timestamp.txt")
    if (file.exists()) {
        return file.text
    }

    def date = new Date()
    def value = date.format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

    file.parentFile.mkdirs()
    file.text = value
    return value
}

// Copy google-services.json from variant directory to root of app
gradle.taskGraph.beforeTask { Task task ->
    if (task.name ==~ /process.*GoogleServices/) {
        android.applicationVariants.all { variant ->
            if (task.name ==~ /(?i)process${variant.name}GoogleServices/) {
                copy {
                    from "src/${variant.name}"
                    into '.'
                    include 'google-services.json'
                }
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
